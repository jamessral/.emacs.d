#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("/Users/jsral/code/loadup-web/" ("about                                                               # List versions of all Rails frameworks and the environment" "annotate_models                                                     # Add schema information (as comments) to model and fixture files" "annotate_routes                                                     # Adds the route map to routes.rb" "app:template                                                        # Applies the template supplied by LOCATION=(/path/to/template) or URL" "app:templates:copy                                                  # " "app:update                                                          # Update configs and some other initially generated files (or use just update:configs or update:bin)" "app:update:bin                                                      # " "app:update:configs                                                  # " "app:update:upgrade_guide_info                                       # " "assets:clean[keep]                                                  # Remove old compiled assets" "assets:clobber                                                      # Remove compiled assets" "assets:environment                                                  # Load asset compile environment" "assets:precompile                                                   # Compile all the assets named in config.assets.precompile" "blazer:run_checks[schedule]                                         # run checks" "blazer:send_failing_checks                                          # " "cache_digests:dependencies                                          # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies                                   # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "ci:build                                                            # Builds stuff for CI to run" "ci:build_web_partner                                                # " "ci:build_web_retail                                                 # " "clock:queue_clean_whitelisted_jwts_job                              # Queues Job to Clean Up Whitelisted JWTs" "cloudinary:sync_static                                              # Sync static resources with cloudinary" "data:customer_organizations:backfill_retail_customer_organizations  # Backfill retail customer organizations" "data:history_items:backfill_customer_organizations                  # Add customer_organization_id to history_items" "data:history_items:change_refund_to_alternate_type                  # " "data:history_items:fill_empty_history_item_item_types               # Set all empty history_item item_types to miscellaneous" "data:history_items:history_item_context_fixes                       # " "data:history_items:history_item_convert_item_types                  # Convert old History Items Item Types to new" "data:history_items:history_item_order_to_trackable                  # Change all HistoryItem Orders to Trackable Column" "data:history_items:history_item_set_customer_id                     # Set history item customer_ids" "data:history_items:history_item_sys_admin_to_owners                 # Migration History Item SysAdmins to Owners" "data:history_items:history_items_context_update                     # Update History Items Context" "data:orders:backfill_customer_organizations                         # Backfill Customer Organizations" "data:orders:backfill_order_entries_count                            # Backfill Order Entries" "data:orders:backfill_transaction_totals                             # Backfill transaction totals" "db:_dump                                                            # " "db:abort_if_pending_migrations                                      # " "db:charset                                                          # " "db:check_protected_environments                                     # " "db:collation                                                        # " "db:create                                                           # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases" "db:create:all                                                       # " "db:drop                                                             # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to dropping the development and test databases" "db:drop:_unsafe                                                     # " "db:drop:all                                                         # " "db:environment:set                                                  # Set the environment value for the database" "db:fixtures:identify                                                # " "db:fixtures:load                                                    # Loads fixtures into the current environment's database" "db:forward                                                          # " "db:load_config                                                      # " "db:migrate                                                          # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:change                                                   # " "db:migrate:down                                                     # " "db:migrate:redo                                                     # " "db:migrate:reset                                                    # " "db:migrate:status                                                   # Display status of migrations" "db:migrate:up                                                       # " "db:purge                                                            # " "db:purge:all                                                        # " "db:reset                                                            # " "db:rollback                                                         # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:rollback:change                                                  # " "db:rollback:down                                                    # " "db:rollback:redo                                                    # " "db:rollback:reset                                                   # " "db:rollback:up                                                      # " "db:schema:cache:clear                                               # Clears a db/schema_cache.yml file" "db:schema:cache:dump                                                # Creates a db/schema_cache.yml file" "db:schema:dump                                                      # Creates a db/schema.rb file that is portable against any DB supported by Active Record" "db:schema:load                                                      # Loads a schema.rb file into the database" "db:schema:load_if_ruby                                              # " "db:seed                                                             # Loads the seed data from db/seeds.rb" "db:setup                                                            # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" "db:structure:dump                                                   # Dumps the database structure to db/structure.sql" "db:structure:load                                                   # Recreates the databases from the structure.sql file" "db:structure:load_if_sql                                            # " "db:test:load                                                        # " "db:test:load_schema                                                 # " "db:test:load_structure                                              # " "db:test:prepare                                                     # " "db:test:purge                                                       # " "db:version                                                          # Retrieves the current schema version number" "default                                                             # " "dev:cache                                                           # Toggle development mode caching on/off" "docs:generate                                                       # Generate API request documentation from API specs" "docs:generate:ordered                                               # Generate API request documentation from API specs (ordered)" "emulate:web_retail                                                  # Build Web Retail App to simulate remote" "environment                                                         # " "geocode:all                                                         # Geocode all objects without coordinates" "geocoder:maxmind:geolite:download                                   # Download MaxMind GeoLite City data" "geocoder:maxmind:geolite:extract                                    # Extract (unzip) MaxMind GeoLite City data" "geocoder:maxmind:geolite:insert                                     # Load/refresh MaxMind GeoLite City data" "geocoder:maxmind:geolite:load                                       # Download and load/refresh MaxMind GeoLite City data" "graphql:upgrade[dir]                                                # " "graphql:upgrade:create_base_objects[base_dir]                       # " "graphql:upgrade:member[member_file]                                 # " "graphql:upgrade:schema[schema_file]                                 # " "haml:convert_erbs                                                   # Perform bulk conversion of all html.erb files to Haml in views folder" "haml:erb2haml                                                       # Convert html.erb to html.haml each file in app/views" "haml:replace_erbs                                                   # Perform bulk conversion of all html.erb files to Haml in views folder, then remove the converted html.erb files" "heroku:build                                                        # Standard call for all heroku deploy tasks" "heroku:deploy                                                       # Deploy" "heroku:drop_node_modules                                            # " "heroku:drop_root_node_modules                                       # Drop Root Folder Node Modules" "heroku:install_firebase_tools                                       # Installs the Firebase CLI" "heroku:parallel_builds                                              # " "heroku:write_source_version_file                                    # Write Source Version to Public Directory" "initializers                                                        # Print out all defined initializers in the order they are invoked by Rails" "log:clear                                                           # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                                                          # Prints out your Rack middleware stack" "notes                                                               # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                                                        # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                                                         # " "notes:optimize                                                      # " "notes:todo                                                          # " "pg_search:multisearch:rebuild[model,schema]                         # Rebuild PgSearch multisearch records for a given model" "railties:install:migrations                                         # " "remove_annotation                                                   # Remove schema information from model and fixture files" "remove_routes                                                       # Removes the route map from routes.rb" "restart                                                             # Restart app by touching tmp/restart.txt" "rollbar:test                                                        # Verify your gem installation by sending a test exception to Rollbar" "routes                                                              # Print out all defined routes in match order, with names" "scheduler:daily                                                     # Tasks to queue daily" "scheduler:hourly                                                    # Tasks to queue daily" "scheduler:seven_central                                             # " "scheduler:seven_eastern                                             # " "scheduler:seven_mountain                                            # " "scheduler:seven_pacific                                             # " "scheduler:ten_minutely                                              # Tasks to queue every 10 minutes" "secret                                                              # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "set_annotation_options                                              # " "spec                                                                # " "spec:all                                                            # " "spec:feature                                                        # Only runs feature specs" "stats                                                               # Report code statistics (KLOCs, etc) from the application or engine" "strong_migrations:alphabetize_columns                               # " "strong_migrations:safety_assured                                    # " "time:zones[country_or_offset]                                       # List all time zones, list by two-letter country code (`rails time:zones[US]`), or list by UTC offset (`rails time:zones[-8]`)" "time:zones:all                                                      # " "time:zones:local                                                    # " "time:zones:us                                                       # " "tmp                                                                 # " "tmp/cache                                                           # " "tmp/cache/assets                                                    # " "tmp/pids                                                            # " "tmp/sockets                                                         # " "tmp:cache:clear                                                     # " "tmp:clear                                                           # Clear cache, socket and screenshot files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear, tmp:screenshots:clear)" "tmp:create                                                          # Creates tmp directories for cache, sockets, and pids" "tmp:pids:clear                                                      # " "tmp:screenshots:clear                                               # " "tmp:sockets:clear                                                   # " "web:build_production                                                # Build Production React WebApp" "web:clear_node_modules                                              # " "web:copy_build_files_to_public                                      # " "web:delete_production_files                                         # " "web:install_dependencies                                            # " "web:perform_production_build                                        # " "web_partner:build_production                                        # Build Production React WebApp" "web_partner:clear_rails_public                                      # Clear React files from Rails Public Directory" "web_partner:copy_to_rails_public                                    # Copy to Rails Public Directory" "web_partner:create_version_file                                     # " "web_partner:drop_node_modules                                       # " "web_partner:install_dependencies                                    # " "web_partner:perform_production_build                                # " "web_partner:upload_to_firebase                                      # " "web_retail:build_production                                         # Build Production React WebApp" "web_retail:clear_rails_public                                       # Clear React files from Rails Public Directory" "web_retail:copy_to_rails_public                                     # Copy to Rails Public Directory" "web_retail:create_version_file                                      # " "web_retail:drop_hashes                                              # " "web_retail:drop_node_modules                                        # " "web_retail:install_dependencies                                     # " "web_retail:perform_production_build                                 # " "web_retail:upload_to_firebase                                       # " "web_retail:verify_build_files                                       # " "webpacker                                                           # Lists all available tasks in Webpacker" "webpacker:binstubs                                                  # Installs Webpacker binstubs in this application" "webpacker:check_binstubs                                            # Verifies that webpack & webpack-dev-server are present" "webpacker:check_node                                                # Verifies if Node.js is installed" "webpacker:check_yarn                                                # Verifies if Yarn is installed" "webpacker:clobber                                                   # Remove the webpack compiled output directory" "webpacker:compile                                                   # Compile JavaScript packs using webpack for production with digests" "webpacker:info                                                      # Provide information on Webpacker's environment" "webpacker:install                                                   # Install Webpacker in this application" "webpacker:install:angular                                           # Install everything needed for Angular" "webpacker:install:coffee                                            # Install everything needed for Coffee" "webpacker:install:elm                                               # Install everything needed for Elm" "webpacker:install:erb                                               # Install everything needed for Erb" "webpacker:install:react                                             # Install everything needed for React" "webpacker:install:stimulus                                          # Install everything needed for Stimulus" "webpacker:install:typescript                                        # Install everything needed for Typescript" "webpacker:install:vue                                               # Install everything needed for Vue" "webpacker:verify_install                                            # Verifies if Webpacker is installed" "webpacker:yarn_install                                              # Support for older Rails versions" "yarn:install                                                        # Install all JavaScript dependencies as specified via Yarn")))